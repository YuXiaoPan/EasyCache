/*
 *
 *  *  Copyright  2015-2016. the original author or authors.
 *  *
 *  *  Licensed under the Apache License, Version 2.0 (the "License");
 *  *  you may not use this file except in compliance with the License.
 *  *  You may obtain a copy of the License at
 *  *
 *  *      http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  *  Unless required by applicable law or agreed to in writing, software
 *  *  distributed under the License is distributed on an "AS IS" BASIS,
 *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  *  See the License for the specific language governing permissions and
 *  *  limitations under the License.
 *
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package li.allan.domain;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-12")
public class ThriftBean implements org.apache.thrift.TBase<ThriftBean, ThriftBean._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftBean");

  private static final org.apache.thrift.protocol.TField BOOL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolType", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField SIGNED_BYTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedByteType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNED_SHORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedShortType", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SIGNED_INT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedIntType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SIGNED_LONG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedLongType", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SIGNED_DOUBLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedDoubleType", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MAP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mapType", org.apache.thrift.protocol.TType.MAP, (short)8);
  private static final org.apache.thrift.protocol.TField MAP_TYPE_WITH_BEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("mapTypeWithBean", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField LIST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("listType", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField LIST_TYPE_WITH_BEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("listTypeWithBean", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("setType", org.apache.thrift.protocol.TType.SET, (short)12);
  private static final org.apache.thrift.protocol.TField SET_TYPE_WITH_BEAN_FIELD_DESC = new org.apache.thrift.protocol.TField("setTypeWithBean", org.apache.thrift.protocol.TType.SET, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftBeanTupleSchemeFactory());
  }

  public boolean boolType; // required
  public byte signedByteType; // required
  public short signedShortType; // required
  public int signedIntType; // required
  public long signedLongType; // required
  public double signedDoubleType; // required
  public String stringType; // required
  public Map<String,String> mapType; // required
  public Map<String,ThriftSubBean> mapTypeWithBean; // required
  public List<String> listType; // required
  public List<ThriftSubBean> listTypeWithBean; // required
  public Set<String> setType; // required
  public Set<ThriftSubBean> setTypeWithBean; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_TYPE((short)1, "boolType"),
    SIGNED_BYTE_TYPE((short)2, "signedByteType"),
    SIGNED_SHORT_TYPE((short)3, "signedShortType"),
    SIGNED_INT_TYPE((short)4, "signedIntType"),
    SIGNED_LONG_TYPE((short)5, "signedLongType"),
    SIGNED_DOUBLE_TYPE((short)6, "signedDoubleType"),
    STRING_TYPE((short)7, "stringType"),
    MAP_TYPE((short)8, "mapType"),
    MAP_TYPE_WITH_BEAN((short)9, "mapTypeWithBean"),
    LIST_TYPE((short)10, "listType"),
    LIST_TYPE_WITH_BEAN((short)11, "listTypeWithBean"),
    SET_TYPE((short)12, "setType"),
    SET_TYPE_WITH_BEAN((short)13, "setTypeWithBean");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_TYPE
          return BOOL_TYPE;
        case 2: // SIGNED_BYTE_TYPE
          return SIGNED_BYTE_TYPE;
        case 3: // SIGNED_SHORT_TYPE
          return SIGNED_SHORT_TYPE;
        case 4: // SIGNED_INT_TYPE
          return SIGNED_INT_TYPE;
        case 5: // SIGNED_LONG_TYPE
          return SIGNED_LONG_TYPE;
        case 6: // SIGNED_DOUBLE_TYPE
          return SIGNED_DOUBLE_TYPE;
        case 7: // STRING_TYPE
          return STRING_TYPE;
        case 8: // MAP_TYPE
          return MAP_TYPE;
        case 9: // MAP_TYPE_WITH_BEAN
          return MAP_TYPE_WITH_BEAN;
        case 10: // LIST_TYPE
          return LIST_TYPE;
        case 11: // LIST_TYPE_WITH_BEAN
          return LIST_TYPE_WITH_BEAN;
        case 12: // SET_TYPE
          return SET_TYPE;
        case 13: // SET_TYPE_WITH_BEAN
          return SET_TYPE_WITH_BEAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLTYPE_ISSET_ID = 0;
  private static final int __SIGNEDBYTETYPE_ISSET_ID = 1;
  private static final int __SIGNEDSHORTTYPE_ISSET_ID = 2;
  private static final int __SIGNEDINTTYPE_ISSET_ID = 3;
  private static final int __SIGNEDLONGTYPE_ISSET_ID = 4;
  private static final int __SIGNEDDOUBLETYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("boolType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIGNED_BYTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedByteType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SIGNED_SHORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedShortType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SIGNED_INT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedIntType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNED_LONG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedLongType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIGNED_DOUBLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedDoubleType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mapType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MAP_TYPE_WITH_BEAN, new org.apache.thrift.meta_data.FieldMetaData("mapTypeWithBean", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftSubBean"))));
    tmpMap.put(_Fields.LIST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("listType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LIST_TYPE_WITH_BEAN, new org.apache.thrift.meta_data.FieldMetaData("listTypeWithBean", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftSubBean"))));
    tmpMap.put(_Fields.SET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("setType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SET_TYPE_WITH_BEAN, new org.apache.thrift.meta_data.FieldMetaData("setTypeWithBean", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "ThriftSubBean"))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftBean.class, metaDataMap);
  }

  public ThriftBean() {
  }

  public ThriftBean(
    boolean boolType,
    byte signedByteType,
    short signedShortType,
    int signedIntType,
    long signedLongType,
    double signedDoubleType,
    String stringType,
    Map<String,String> mapType,
    Map<String,ThriftSubBean> mapTypeWithBean,
    List<String> listType,
    List<ThriftSubBean> listTypeWithBean,
    Set<String> setType,
    Set<ThriftSubBean> setTypeWithBean)
  {
    this();
    this.boolType = boolType;
    setBoolTypeIsSet(true);
    this.signedByteType = signedByteType;
    setSignedByteTypeIsSet(true);
    this.signedShortType = signedShortType;
    setSignedShortTypeIsSet(true);
    this.signedIntType = signedIntType;
    setSignedIntTypeIsSet(true);
    this.signedLongType = signedLongType;
    setSignedLongTypeIsSet(true);
    this.signedDoubleType = signedDoubleType;
    setSignedDoubleTypeIsSet(true);
    this.stringType = stringType;
    this.mapType = mapType;
    this.mapTypeWithBean = mapTypeWithBean;
    this.listType = listType;
    this.listTypeWithBean = listTypeWithBean;
    this.setType = setType;
    this.setTypeWithBean = setTypeWithBean;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftBean(ThriftBean other) {
    __isset_bitfield = other.__isset_bitfield;
    this.boolType = other.boolType;
    this.signedByteType = other.signedByteType;
    this.signedShortType = other.signedShortType;
    this.signedIntType = other.signedIntType;
    this.signedLongType = other.signedLongType;
    this.signedDoubleType = other.signedDoubleType;
    if (other.isSetStringType()) {
      this.stringType = other.stringType;
    }
    if (other.isSetMapType()) {
      Map<String,String> __this__mapType = new HashMap<String,String>(other.mapType);
      this.mapType = __this__mapType;
    }
    if (other.isSetMapTypeWithBean()) {
      Map<String,ThriftSubBean> __this__mapTypeWithBean = new HashMap<String,ThriftSubBean>(other.mapTypeWithBean.size());
      for (Map.Entry<String, ThriftSubBean> other_element : other.mapTypeWithBean.entrySet()) {

        String other_element_key = other_element.getKey();
        ThriftSubBean other_element_value = other_element.getValue();

        String __this__mapTypeWithBean_copy_key = other_element_key;

        ThriftSubBean __this__mapTypeWithBean_copy_value = other_element_value;

        __this__mapTypeWithBean.put(__this__mapTypeWithBean_copy_key, __this__mapTypeWithBean_copy_value);
      }
      this.mapTypeWithBean = __this__mapTypeWithBean;
    }
    if (other.isSetListType()) {
      List<String> __this__listType = new ArrayList<String>(other.listType);
      this.listType = __this__listType;
    }
    if (other.isSetListTypeWithBean()) {
      List<ThriftSubBean> __this__listTypeWithBean = new ArrayList<ThriftSubBean>(other.listTypeWithBean.size());
      for (ThriftSubBean other_element : other.listTypeWithBean) {
        __this__listTypeWithBean.add(other_element);
      }
      this.listTypeWithBean = __this__listTypeWithBean;
    }
    if (other.isSetSetType()) {
      Set<String> __this__setType = new HashSet<String>(other.setType);
      this.setType = __this__setType;
    }
    if (other.isSetSetTypeWithBean()) {
      Set<ThriftSubBean> __this__setTypeWithBean = new HashSet<ThriftSubBean>(other.setTypeWithBean.size());
      for (ThriftSubBean other_element : other.setTypeWithBean) {
        __this__setTypeWithBean.add(other_element);
      }
      this.setTypeWithBean = __this__setTypeWithBean;
    }
  }

  public ThriftBean deepCopy() {
    return new ThriftBean(this);
  }

  @Override
  public void clear() {
    setBoolTypeIsSet(false);
    this.boolType = false;
    setSignedByteTypeIsSet(false);
    this.signedByteType = 0;
    setSignedShortTypeIsSet(false);
    this.signedShortType = 0;
    setSignedIntTypeIsSet(false);
    this.signedIntType = 0;
    setSignedLongTypeIsSet(false);
    this.signedLongType = 0;
    setSignedDoubleTypeIsSet(false);
    this.signedDoubleType = 0.0;
    this.stringType = null;
    this.mapType = null;
    this.mapTypeWithBean = null;
    this.listType = null;
    this.listTypeWithBean = null;
    this.setType = null;
    this.setTypeWithBean = null;
  }

  public boolean isBoolType() {
    return this.boolType;
  }

  public ThriftBean setBoolType(boolean boolType) {
    this.boolType = boolType;
    setBoolTypeIsSet(true);
    return this;
  }

  public void unsetBoolType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLTYPE_ISSET_ID);
  }

  /** Returns true if field boolType is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolType() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLTYPE_ISSET_ID);
  }

  public void setBoolTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLTYPE_ISSET_ID, value);
  }

  public byte getSignedByteType() {
    return this.signedByteType;
  }

  public ThriftBean setSignedByteType(byte signedByteType) {
    this.signedByteType = signedByteType;
    setSignedByteTypeIsSet(true);
    return this;
  }

  public void unsetSignedByteType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDBYTETYPE_ISSET_ID);
  }

  /** Returns true if field signedByteType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedByteType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDBYTETYPE_ISSET_ID);
  }

  public void setSignedByteTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDBYTETYPE_ISSET_ID, value);
  }

  public short getSignedShortType() {
    return this.signedShortType;
  }

  public ThriftBean setSignedShortType(short signedShortType) {
    this.signedShortType = signedShortType;
    setSignedShortTypeIsSet(true);
    return this;
  }

  public void unsetSignedShortType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDSHORTTYPE_ISSET_ID);
  }

  /** Returns true if field signedShortType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedShortType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDSHORTTYPE_ISSET_ID);
  }

  public void setSignedShortTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDSHORTTYPE_ISSET_ID, value);
  }

  public int getSignedIntType() {
    return this.signedIntType;
  }

  public ThriftBean setSignedIntType(int signedIntType) {
    this.signedIntType = signedIntType;
    setSignedIntTypeIsSet(true);
    return this;
  }

  public void unsetSignedIntType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDINTTYPE_ISSET_ID);
  }

  /** Returns true if field signedIntType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedIntType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDINTTYPE_ISSET_ID);
  }

  public void setSignedIntTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDINTTYPE_ISSET_ID, value);
  }

  public long getSignedLongType() {
    return this.signedLongType;
  }

  public ThriftBean setSignedLongType(long signedLongType) {
    this.signedLongType = signedLongType;
    setSignedLongTypeIsSet(true);
    return this;
  }

  public void unsetSignedLongType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDLONGTYPE_ISSET_ID);
  }

  /** Returns true if field signedLongType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedLongType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDLONGTYPE_ISSET_ID);
  }

  public void setSignedLongTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDLONGTYPE_ISSET_ID, value);
  }

  public double getSignedDoubleType() {
    return this.signedDoubleType;
  }

  public ThriftBean setSignedDoubleType(double signedDoubleType) {
    this.signedDoubleType = signedDoubleType;
    setSignedDoubleTypeIsSet(true);
    return this;
  }

  public void unsetSignedDoubleType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDDOUBLETYPE_ISSET_ID);
  }

  /** Returns true if field signedDoubleType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedDoubleType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDDOUBLETYPE_ISSET_ID);
  }

  public void setSignedDoubleTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDDOUBLETYPE_ISSET_ID, value);
  }

  public String getStringType() {
    return this.stringType;
  }

  public ThriftBean setStringType(String stringType) {
    this.stringType = stringType;
    return this;
  }

  public void unsetStringType() {
    this.stringType = null;
  }

  /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
  public boolean isSetStringType() {
    return this.stringType != null;
  }

  public void setStringTypeIsSet(boolean value) {
    if (!value) {
      this.stringType = null;
    }
  }

  public int getMapTypeSize() {
    return (this.mapType == null) ? 0 : this.mapType.size();
  }

  public void putToMapType(String key, String val) {
    if (this.mapType == null) {
      this.mapType = new HashMap<String,String>();
    }
    this.mapType.put(key, val);
  }

  public Map<String,String> getMapType() {
    return this.mapType;
  }

  public ThriftBean setMapType(Map<String,String> mapType) {
    this.mapType = mapType;
    return this;
  }

  public void unsetMapType() {
    this.mapType = null;
  }

  /** Returns true if field mapType is set (has been assigned a value) and false otherwise */
  public boolean isSetMapType() {
    return this.mapType != null;
  }

  public void setMapTypeIsSet(boolean value) {
    if (!value) {
      this.mapType = null;
    }
  }

  public int getMapTypeWithBeanSize() {
    return (this.mapTypeWithBean == null) ? 0 : this.mapTypeWithBean.size();
  }

  public void putToMapTypeWithBean(String key, ThriftSubBean val) {
    if (this.mapTypeWithBean == null) {
      this.mapTypeWithBean = new HashMap<String,ThriftSubBean>();
    }
    this.mapTypeWithBean.put(key, val);
  }

  public Map<String,ThriftSubBean> getMapTypeWithBean() {
    return this.mapTypeWithBean;
  }

  public ThriftBean setMapTypeWithBean(Map<String,ThriftSubBean> mapTypeWithBean) {
    this.mapTypeWithBean = mapTypeWithBean;
    return this;
  }

  public void unsetMapTypeWithBean() {
    this.mapTypeWithBean = null;
  }

  /** Returns true if field mapTypeWithBean is set (has been assigned a value) and false otherwise */
  public boolean isSetMapTypeWithBean() {
    return this.mapTypeWithBean != null;
  }

  public void setMapTypeWithBeanIsSet(boolean value) {
    if (!value) {
      this.mapTypeWithBean = null;
    }
  }

  public int getListTypeSize() {
    return (this.listType == null) ? 0 : this.listType.size();
  }

  public java.util.Iterator<String> getListTypeIterator() {
    return (this.listType == null) ? null : this.listType.iterator();
  }

  public void addToListType(String elem) {
    if (this.listType == null) {
      this.listType = new ArrayList<String>();
    }
    this.listType.add(elem);
  }

  public List<String> getListType() {
    return this.listType;
  }

  public ThriftBean setListType(List<String> listType) {
    this.listType = listType;
    return this;
  }

  public void unsetListType() {
    this.listType = null;
  }

  /** Returns true if field listType is set (has been assigned a value) and false otherwise */
  public boolean isSetListType() {
    return this.listType != null;
  }

  public void setListTypeIsSet(boolean value) {
    if (!value) {
      this.listType = null;
    }
  }

  public int getListTypeWithBeanSize() {
    return (this.listTypeWithBean == null) ? 0 : this.listTypeWithBean.size();
  }

  public java.util.Iterator<ThriftSubBean> getListTypeWithBeanIterator() {
    return (this.listTypeWithBean == null) ? null : this.listTypeWithBean.iterator();
  }

  public void addToListTypeWithBean(ThriftSubBean elem) {
    if (this.listTypeWithBean == null) {
      this.listTypeWithBean = new ArrayList<ThriftSubBean>();
    }
    this.listTypeWithBean.add(elem);
  }

  public List<ThriftSubBean> getListTypeWithBean() {
    return this.listTypeWithBean;
  }

  public ThriftBean setListTypeWithBean(List<ThriftSubBean> listTypeWithBean) {
    this.listTypeWithBean = listTypeWithBean;
    return this;
  }

  public void unsetListTypeWithBean() {
    this.listTypeWithBean = null;
  }

  /** Returns true if field listTypeWithBean is set (has been assigned a value) and false otherwise */
  public boolean isSetListTypeWithBean() {
    return this.listTypeWithBean != null;
  }

  public void setListTypeWithBeanIsSet(boolean value) {
    if (!value) {
      this.listTypeWithBean = null;
    }
  }

  public int getSetTypeSize() {
    return (this.setType == null) ? 0 : this.setType.size();
  }

  public java.util.Iterator<String> getSetTypeIterator() {
    return (this.setType == null) ? null : this.setType.iterator();
  }

  public void addToSetType(String elem) {
    if (this.setType == null) {
      this.setType = new HashSet<String>();
    }
    this.setType.add(elem);
  }

  public Set<String> getSetType() {
    return this.setType;
  }

  public ThriftBean setSetType(Set<String> setType) {
    this.setType = setType;
    return this;
  }

  public void unsetSetType() {
    this.setType = null;
  }

  /** Returns true if field setType is set (has been assigned a value) and false otherwise */
  public boolean isSetSetType() {
    return this.setType != null;
  }

  public void setSetTypeIsSet(boolean value) {
    if (!value) {
      this.setType = null;
    }
  }

  public int getSetTypeWithBeanSize() {
    return (this.setTypeWithBean == null) ? 0 : this.setTypeWithBean.size();
  }

  public java.util.Iterator<ThriftSubBean> getSetTypeWithBeanIterator() {
    return (this.setTypeWithBean == null) ? null : this.setTypeWithBean.iterator();
  }

  public void addToSetTypeWithBean(ThriftSubBean elem) {
    if (this.setTypeWithBean == null) {
      this.setTypeWithBean = new HashSet<ThriftSubBean>();
    }
    this.setTypeWithBean.add(elem);
  }

  public Set<ThriftSubBean> getSetTypeWithBean() {
    return this.setTypeWithBean;
  }

  public ThriftBean setSetTypeWithBean(Set<ThriftSubBean> setTypeWithBean) {
    this.setTypeWithBean = setTypeWithBean;
    return this;
  }

  public void unsetSetTypeWithBean() {
    this.setTypeWithBean = null;
  }

  /** Returns true if field setTypeWithBean is set (has been assigned a value) and false otherwise */
  public boolean isSetSetTypeWithBean() {
    return this.setTypeWithBean != null;
  }

  public void setSetTypeWithBeanIsSet(boolean value) {
    if (!value) {
      this.setTypeWithBean = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_TYPE:
      if (value == null) {
        unsetBoolType();
      } else {
        setBoolType((Boolean)value);
      }
      break;

    case SIGNED_BYTE_TYPE:
      if (value == null) {
        unsetSignedByteType();
      } else {
        setSignedByteType((Byte)value);
      }
      break;

    case SIGNED_SHORT_TYPE:
      if (value == null) {
        unsetSignedShortType();
      } else {
        setSignedShortType((Short)value);
      }
      break;

    case SIGNED_INT_TYPE:
      if (value == null) {
        unsetSignedIntType();
      } else {
        setSignedIntType((Integer)value);
      }
      break;

    case SIGNED_LONG_TYPE:
      if (value == null) {
        unsetSignedLongType();
      } else {
        setSignedLongType((Long)value);
      }
      break;

    case SIGNED_DOUBLE_TYPE:
      if (value == null) {
        unsetSignedDoubleType();
      } else {
        setSignedDoubleType((Double)value);
      }
      break;

    case STRING_TYPE:
      if (value == null) {
        unsetStringType();
      } else {
        setStringType((String)value);
      }
      break;

    case MAP_TYPE:
      if (value == null) {
        unsetMapType();
      } else {
        setMapType((Map<String,String>)value);
      }
      break;

    case MAP_TYPE_WITH_BEAN:
      if (value == null) {
        unsetMapTypeWithBean();
      } else {
        setMapTypeWithBean((Map<String,ThriftSubBean>)value);
      }
      break;

    case LIST_TYPE:
      if (value == null) {
        unsetListType();
      } else {
        setListType((List<String>)value);
      }
      break;

    case LIST_TYPE_WITH_BEAN:
      if (value == null) {
        unsetListTypeWithBean();
      } else {
        setListTypeWithBean((List<ThriftSubBean>)value);
      }
      break;

    case SET_TYPE:
      if (value == null) {
        unsetSetType();
      } else {
        setSetType((Set<String>)value);
      }
      break;

    case SET_TYPE_WITH_BEAN:
      if (value == null) {
        unsetSetTypeWithBean();
      } else {
        setSetTypeWithBean((Set<ThriftSubBean>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_TYPE:
      return isBoolType();

    case SIGNED_BYTE_TYPE:
      return getSignedByteType();

    case SIGNED_SHORT_TYPE:
      return getSignedShortType();

    case SIGNED_INT_TYPE:
      return getSignedIntType();

    case SIGNED_LONG_TYPE:
      return getSignedLongType();

    case SIGNED_DOUBLE_TYPE:
      return getSignedDoubleType();

    case STRING_TYPE:
      return getStringType();

    case MAP_TYPE:
      return getMapType();

    case MAP_TYPE_WITH_BEAN:
      return getMapTypeWithBean();

    case LIST_TYPE:
      return getListType();

    case LIST_TYPE_WITH_BEAN:
      return getListTypeWithBean();

    case SET_TYPE:
      return getSetType();

    case SET_TYPE_WITH_BEAN:
      return getSetTypeWithBean();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_TYPE:
      return isSetBoolType();
    case SIGNED_BYTE_TYPE:
      return isSetSignedByteType();
    case SIGNED_SHORT_TYPE:
      return isSetSignedShortType();
    case SIGNED_INT_TYPE:
      return isSetSignedIntType();
    case SIGNED_LONG_TYPE:
      return isSetSignedLongType();
    case SIGNED_DOUBLE_TYPE:
      return isSetSignedDoubleType();
    case STRING_TYPE:
      return isSetStringType();
    case MAP_TYPE:
      return isSetMapType();
    case MAP_TYPE_WITH_BEAN:
      return isSetMapTypeWithBean();
    case LIST_TYPE:
      return isSetListType();
    case LIST_TYPE_WITH_BEAN:
      return isSetListTypeWithBean();
    case SET_TYPE:
      return isSetSetType();
    case SET_TYPE_WITH_BEAN:
      return isSetSetTypeWithBean();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftBean)
      return this.equals((ThriftBean)that);
    return false;
  }

  public boolean equals(ThriftBean that) {
    if (that == null)
      return false;

    boolean this_present_boolType = true;
    boolean that_present_boolType = true;
    if (this_present_boolType || that_present_boolType) {
      if (!(this_present_boolType && that_present_boolType))
        return false;
      if (this.boolType != that.boolType)
        return false;
    }

    boolean this_present_signedByteType = true;
    boolean that_present_signedByteType = true;
    if (this_present_signedByteType || that_present_signedByteType) {
      if (!(this_present_signedByteType && that_present_signedByteType))
        return false;
      if (this.signedByteType != that.signedByteType)
        return false;
    }

    boolean this_present_signedShortType = true;
    boolean that_present_signedShortType = true;
    if (this_present_signedShortType || that_present_signedShortType) {
      if (!(this_present_signedShortType && that_present_signedShortType))
        return false;
      if (this.signedShortType != that.signedShortType)
        return false;
    }

    boolean this_present_signedIntType = true;
    boolean that_present_signedIntType = true;
    if (this_present_signedIntType || that_present_signedIntType) {
      if (!(this_present_signedIntType && that_present_signedIntType))
        return false;
      if (this.signedIntType != that.signedIntType)
        return false;
    }

    boolean this_present_signedLongType = true;
    boolean that_present_signedLongType = true;
    if (this_present_signedLongType || that_present_signedLongType) {
      if (!(this_present_signedLongType && that_present_signedLongType))
        return false;
      if (this.signedLongType != that.signedLongType)
        return false;
    }

    boolean this_present_signedDoubleType = true;
    boolean that_present_signedDoubleType = true;
    if (this_present_signedDoubleType || that_present_signedDoubleType) {
      if (!(this_present_signedDoubleType && that_present_signedDoubleType))
        return false;
      if (this.signedDoubleType != that.signedDoubleType)
        return false;
    }

    boolean this_present_stringType = true && this.isSetStringType();
    boolean that_present_stringType = true && that.isSetStringType();
    if (this_present_stringType || that_present_stringType) {
      if (!(this_present_stringType && that_present_stringType))
        return false;
      if (!this.stringType.equals(that.stringType))
        return false;
    }

    boolean this_present_mapType = true && this.isSetMapType();
    boolean that_present_mapType = true && that.isSetMapType();
    if (this_present_mapType || that_present_mapType) {
      if (!(this_present_mapType && that_present_mapType))
        return false;
      if (!this.mapType.equals(that.mapType))
        return false;
    }

    boolean this_present_mapTypeWithBean = true && this.isSetMapTypeWithBean();
    boolean that_present_mapTypeWithBean = true && that.isSetMapTypeWithBean();
    if (this_present_mapTypeWithBean || that_present_mapTypeWithBean) {
      if (!(this_present_mapTypeWithBean && that_present_mapTypeWithBean))
        return false;
      if (!this.mapTypeWithBean.equals(that.mapTypeWithBean))
        return false;
    }

    boolean this_present_listType = true && this.isSetListType();
    boolean that_present_listType = true && that.isSetListType();
    if (this_present_listType || that_present_listType) {
      if (!(this_present_listType && that_present_listType))
        return false;
      if (!this.listType.equals(that.listType))
        return false;
    }

    boolean this_present_listTypeWithBean = true && this.isSetListTypeWithBean();
    boolean that_present_listTypeWithBean = true && that.isSetListTypeWithBean();
    if (this_present_listTypeWithBean || that_present_listTypeWithBean) {
      if (!(this_present_listTypeWithBean && that_present_listTypeWithBean))
        return false;
      if (!this.listTypeWithBean.equals(that.listTypeWithBean))
        return false;
    }

    boolean this_present_setType = true && this.isSetSetType();
    boolean that_present_setType = true && that.isSetSetType();
    if (this_present_setType || that_present_setType) {
      if (!(this_present_setType && that_present_setType))
        return false;
      if (!this.setType.equals(that.setType))
        return false;
    }

    boolean this_present_setTypeWithBean = true && this.isSetSetTypeWithBean();
    boolean that_present_setTypeWithBean = true && that.isSetSetTypeWithBean();
    if (this_present_setTypeWithBean || that_present_setTypeWithBean) {
      if (!(this_present_setTypeWithBean && that_present_setTypeWithBean))
        return false;
      if (!this.setTypeWithBean.equals(that.setTypeWithBean))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_boolType = true;
    list.add(present_boolType);
    if (present_boolType)
      list.add(boolType);

    boolean present_signedByteType = true;
    list.add(present_signedByteType);
    if (present_signedByteType)
      list.add(signedByteType);

    boolean present_signedShortType = true;
    list.add(present_signedShortType);
    if (present_signedShortType)
      list.add(signedShortType);

    boolean present_signedIntType = true;
    list.add(present_signedIntType);
    if (present_signedIntType)
      list.add(signedIntType);

    boolean present_signedLongType = true;
    list.add(present_signedLongType);
    if (present_signedLongType)
      list.add(signedLongType);

    boolean present_signedDoubleType = true;
    list.add(present_signedDoubleType);
    if (present_signedDoubleType)
      list.add(signedDoubleType);

    boolean present_stringType = true && (isSetStringType());
    list.add(present_stringType);
    if (present_stringType)
      list.add(stringType);

    boolean present_mapType = true && (isSetMapType());
    list.add(present_mapType);
    if (present_mapType)
      list.add(mapType);

    boolean present_mapTypeWithBean = true && (isSetMapTypeWithBean());
    list.add(present_mapTypeWithBean);
    if (present_mapTypeWithBean)
      list.add(mapTypeWithBean);

    boolean present_listType = true && (isSetListType());
    list.add(present_listType);
    if (present_listType)
      list.add(listType);

    boolean present_listTypeWithBean = true && (isSetListTypeWithBean());
    list.add(present_listTypeWithBean);
    if (present_listTypeWithBean)
      list.add(listTypeWithBean);

    boolean present_setType = true && (isSetSetType());
    list.add(present_setType);
    if (present_setType)
      list.add(setType);

    boolean present_setTypeWithBean = true && (isSetSetTypeWithBean());
    list.add(present_setTypeWithBean);
    if (present_setTypeWithBean)
      list.add(setTypeWithBean);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBoolType()).compareTo(other.isSetBoolType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolType, other.boolType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedByteType()).compareTo(other.isSetSignedByteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedByteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedByteType, other.signedByteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedShortType()).compareTo(other.isSetSignedShortType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedShortType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedShortType, other.signedShortType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedIntType()).compareTo(other.isSetSignedIntType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedIntType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedIntType, other.signedIntType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedLongType()).compareTo(other.isSetSignedLongType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedLongType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedLongType, other.signedLongType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedDoubleType()).compareTo(other.isSetSignedDoubleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedDoubleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedDoubleType, other.signedDoubleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapType()).compareTo(other.isSetMapType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapType, other.mapType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapTypeWithBean()).compareTo(other.isSetMapTypeWithBean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapTypeWithBean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapTypeWithBean, other.mapTypeWithBean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListType()).compareTo(other.isSetListType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listType, other.listType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListTypeWithBean()).compareTo(other.isSetListTypeWithBean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListTypeWithBean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listTypeWithBean, other.listTypeWithBean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetType()).compareTo(other.isSetSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setType, other.setType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSetTypeWithBean()).compareTo(other.isSetSetTypeWithBean());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSetTypeWithBean()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.setTypeWithBean, other.setTypeWithBean);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftBean(");
    boolean first = true;

    sb.append("boolType:");
    sb.append(this.boolType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedByteType:");
    sb.append(this.signedByteType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedShortType:");
    sb.append(this.signedShortType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedIntType:");
    sb.append(this.signedIntType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedLongType:");
    sb.append(this.signedLongType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedDoubleType:");
    sb.append(this.signedDoubleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringType:");
    if (this.stringType == null) {
      sb.append("null");
    } else {
      sb.append(this.stringType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapType:");
    if (this.mapType == null) {
      sb.append("null");
    } else {
      sb.append(this.mapType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mapTypeWithBean:");
    if (this.mapTypeWithBean == null) {
      sb.append("null");
    } else {
      sb.append(this.mapTypeWithBean);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listType:");
    if (this.listType == null) {
      sb.append("null");
    } else {
      sb.append(this.listType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("listTypeWithBean:");
    if (this.listTypeWithBean == null) {
      sb.append("null");
    } else {
      sb.append(this.listTypeWithBean);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setType:");
    if (this.setType == null) {
      sb.append("null");
    } else {
      sb.append(this.setType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("setTypeWithBean:");
    if (this.setTypeWithBean == null) {
      sb.append("null");
    } else {
      sb.append(this.setTypeWithBean);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'boolType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedByteType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedShortType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedIntType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedLongType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedDoubleType' because it's a primitive and you chose the non-beans generator.
    if (stringType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stringType' was not present! Struct: " + toString());
    }
    if (mapType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mapType' was not present! Struct: " + toString());
    }
    if (mapTypeWithBean == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'mapTypeWithBean' was not present! Struct: " + toString());
    }
    if (listType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'listType' was not present! Struct: " + toString());
    }
    if (listTypeWithBean == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'listTypeWithBean' was not present! Struct: " + toString());
    }
    if (setType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'setType' was not present! Struct: " + toString());
    }
    if (setTypeWithBean == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'setTypeWithBean' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftBeanStandardSchemeFactory implements SchemeFactory {
    public ThriftBeanStandardScheme getScheme() {
      return new ThriftBeanStandardScheme();
    }
  }

  private static class ThriftBeanStandardScheme extends StandardScheme<ThriftBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolType = iprot.readBool();
              struct.setBoolTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIGNED_BYTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.signedByteType = iprot.readByte();
              struct.setSignedByteTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNED_SHORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.signedShortType = iprot.readI16();
              struct.setSignedShortTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIGNED_INT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.signedIntType = iprot.readI32();
              struct.setSignedIntTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIGNED_LONG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.signedLongType = iprot.readI64();
              struct.setSignedLongTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIGNED_DOUBLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.signedDoubleType = iprot.readDouble();
              struct.setSignedDoubleTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringType = iprot.readString();
              struct.setStringTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map538 = iprot.readMapBegin();
                struct.mapType = new HashMap<String,String>(2*_map538.size);
                String _key539;
                String _val540;
                for (int _i541 = 0; _i541 < _map538.size; ++_i541)
                {
                  _key539 = iprot.readString();
                  _val540 = iprot.readString();
                  struct.mapType.put(_key539, _val540);
                }
                iprot.readMapEnd();
              }
              struct.setMapTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MAP_TYPE_WITH_BEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map542 = iprot.readMapBegin();
                struct.mapTypeWithBean = new HashMap<String,ThriftSubBean>(2*_map542.size);
                String _key543;
                ThriftSubBean _val544;
                for (int _i545 = 0; _i545 < _map542.size; ++_i545)
                {
                  _key543 = iprot.readString();
                  _val544 = new ThriftSubBean();
                  _val544.read(iprot);
                  struct.mapTypeWithBean.put(_key543, _val544);
                }
                iprot.readMapEnd();
              }
              struct.setMapTypeWithBeanIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LIST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list546 = iprot.readListBegin();
                struct.listType = new ArrayList<String>(_list546.size);
                String _elem547;
                for (int _i548 = 0; _i548 < _list546.size; ++_i548)
                {
                  _elem547 = iprot.readString();
                  struct.listType.add(_elem547);
                }
                iprot.readListEnd();
              }
              struct.setListTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LIST_TYPE_WITH_BEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list549 = iprot.readListBegin();
                struct.listTypeWithBean = new ArrayList<ThriftSubBean>(_list549.size);
                ThriftSubBean _elem550;
                for (int _i551 = 0; _i551 < _list549.size; ++_i551)
                {
                  _elem550 = new ThriftSubBean();
                  _elem550.read(iprot);
                  struct.listTypeWithBean.add(_elem550);
                }
                iprot.readListEnd();
              }
              struct.setListTypeWithBeanIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set552 = iprot.readSetBegin();
                struct.setType = new HashSet<String>(2*_set552.size);
                String _elem553;
                for (int _i554 = 0; _i554 < _set552.size; ++_i554)
                {
                  _elem553 = iprot.readString();
                  struct.setType.add(_elem553);
                }
                iprot.readSetEnd();
              }
              struct.setSetTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SET_TYPE_WITH_BEAN
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set555 = iprot.readSetBegin();
                struct.setTypeWithBean = new HashSet<ThriftSubBean>(2*_set555.size);
                ThriftSubBean _elem556;
                for (int _i557 = 0; _i557 < _set555.size; ++_i557)
                {
                  _elem556 = new ThriftSubBean();
                  _elem556.read(iprot);
                  struct.setTypeWithBean.add(_elem556);
                }
                iprot.readSetEnd();
              }
              struct.setSetTypeWithBeanIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBoolType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'boolType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedByteType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedByteType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedShortType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedShortType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedIntType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedIntType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedLongType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedLongType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedDoubleType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedDoubleType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOL_TYPE_FIELD_DESC);
      oprot.writeBool(struct.boolType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_BYTE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.signedByteType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_SHORT_TYPE_FIELD_DESC);
      oprot.writeI16(struct.signedShortType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_INT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.signedIntType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_LONG_TYPE_FIELD_DESC);
      oprot.writeI64(struct.signedLongType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_DOUBLE_TYPE_FIELD_DESC);
      oprot.writeDouble(struct.signedDoubleType);
      oprot.writeFieldEnd();
      if (struct.stringType != null) {
        oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
        oprot.writeString(struct.stringType);
        oprot.writeFieldEnd();
      }
      if (struct.mapType != null) {
        oprot.writeFieldBegin(MAP_TYPE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.mapType.size()));
          for (Map.Entry<String, String> _iter558 : struct.mapType.entrySet())
          {
            oprot.writeString(_iter558.getKey());
            oprot.writeString(_iter558.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mapTypeWithBean != null) {
        oprot.writeFieldBegin(MAP_TYPE_WITH_BEAN_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.mapTypeWithBean.size()));
          for (Map.Entry<String, ThriftSubBean> _iter559 : struct.mapTypeWithBean.entrySet())
          {
            oprot.writeString(_iter559.getKey());
            _iter559.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.listType != null) {
        oprot.writeFieldBegin(LIST_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listType.size()));
          for (String _iter560 : struct.listType)
          {
            oprot.writeString(_iter560);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.listTypeWithBean != null) {
        oprot.writeFieldBegin(LIST_TYPE_WITH_BEAN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.listTypeWithBean.size()));
          for (ThriftSubBean _iter561 : struct.listTypeWithBean)
          {
            _iter561.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setType != null) {
        oprot.writeFieldBegin(SET_TYPE_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.setType.size()));
          for (String _iter562 : struct.setType)
          {
            oprot.writeString(_iter562);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.setTypeWithBean != null) {
        oprot.writeFieldBegin(SET_TYPE_WITH_BEAN_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.setTypeWithBean.size()));
          for (ThriftSubBean _iter563 : struct.setTypeWithBean)
          {
            _iter563.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftBeanTupleSchemeFactory implements SchemeFactory {
    public ThriftBeanTupleScheme getScheme() {
      return new ThriftBeanTupleScheme();
    }
  }

  private static class ThriftBeanTupleScheme extends TupleScheme<ThriftBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.boolType);
      oprot.writeByte(struct.signedByteType);
      oprot.writeI16(struct.signedShortType);
      oprot.writeI32(struct.signedIntType);
      oprot.writeI64(struct.signedLongType);
      oprot.writeDouble(struct.signedDoubleType);
      oprot.writeString(struct.stringType);
      {
        oprot.writeI32(struct.mapType.size());
        for (Map.Entry<String, String> _iter564 : struct.mapType.entrySet())
        {
          oprot.writeString(_iter564.getKey());
          oprot.writeString(_iter564.getValue());
        }
      }
      {
        oprot.writeI32(struct.mapTypeWithBean.size());
        for (Map.Entry<String, ThriftSubBean> _iter565 : struct.mapTypeWithBean.entrySet())
        {
          oprot.writeString(_iter565.getKey());
          _iter565.getValue().write(oprot);
        }
      }
      {
        oprot.writeI32(struct.listType.size());
        for (String _iter566 : struct.listType)
        {
          oprot.writeString(_iter566);
        }
      }
      {
        oprot.writeI32(struct.listTypeWithBean.size());
        for (ThriftSubBean _iter567 : struct.listTypeWithBean)
        {
          _iter567.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.setType.size());
        for (String _iter568 : struct.setType)
        {
          oprot.writeString(_iter568);
        }
      }
      {
        oprot.writeI32(struct.setTypeWithBean.size());
        for (ThriftSubBean _iter569 : struct.setTypeWithBean)
        {
          _iter569.write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.boolType = iprot.readBool();
      struct.setBoolTypeIsSet(true);
      struct.signedByteType = iprot.readByte();
      struct.setSignedByteTypeIsSet(true);
      struct.signedShortType = iprot.readI16();
      struct.setSignedShortTypeIsSet(true);
      struct.signedIntType = iprot.readI32();
      struct.setSignedIntTypeIsSet(true);
      struct.signedLongType = iprot.readI64();
      struct.setSignedLongTypeIsSet(true);
      struct.signedDoubleType = iprot.readDouble();
      struct.setSignedDoubleTypeIsSet(true);
      struct.stringType = iprot.readString();
      struct.setStringTypeIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map570 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.mapType = new HashMap<String,String>(2*_map570.size);
        String _key571;
        String _val572;
        for (int _i573 = 0; _i573 < _map570.size; ++_i573)
        {
          _key571 = iprot.readString();
          _val572 = iprot.readString();
          struct.mapType.put(_key571, _val572);
        }
      }
      struct.setMapTypeIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map574 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.mapTypeWithBean = new HashMap<String,ThriftSubBean>(2*_map574.size);
        String _key575;
        ThriftSubBean _val576;
        for (int _i577 = 0; _i577 < _map574.size; ++_i577)
        {
          _key575 = iprot.readString();
          _val576 = new ThriftSubBean();
          _val576.read(iprot);
          struct.mapTypeWithBean.put(_key575, _val576);
        }
      }
      struct.setMapTypeWithBeanIsSet(true);
      {
        org.apache.thrift.protocol.TList _list578 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.listType = new ArrayList<String>(_list578.size);
        String _elem579;
        for (int _i580 = 0; _i580 < _list578.size; ++_i580)
        {
          _elem579 = iprot.readString();
          struct.listType.add(_elem579);
        }
      }
      struct.setListTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list581 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.listTypeWithBean = new ArrayList<ThriftSubBean>(_list581.size);
        ThriftSubBean _elem582;
        for (int _i583 = 0; _i583 < _list581.size; ++_i583)
        {
          _elem582 = new ThriftSubBean();
          _elem582.read(iprot);
          struct.listTypeWithBean.add(_elem582);
        }
      }
      struct.setListTypeWithBeanIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set584 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.setType = new HashSet<String>(2*_set584.size);
        String _elem585;
        for (int _i586 = 0; _i586 < _set584.size; ++_i586)
        {
          _elem585 = iprot.readString();
          struct.setType.add(_elem585);
        }
      }
      struct.setSetTypeIsSet(true);
      {
        org.apache.thrift.protocol.TSet _set587 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.setTypeWithBean = new HashSet<ThriftSubBean>(2*_set587.size);
        ThriftSubBean _elem588;
        for (int _i589 = 0; _i589 < _set587.size; ++_i589)
        {
          _elem588 = new ThriftSubBean();
          _elem588.read(iprot);
          struct.setTypeWithBean.add(_elem588);
        }
      }
      struct.setSetTypeWithBeanIsSet(true);
    }
  }

}

