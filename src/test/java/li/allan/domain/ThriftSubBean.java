/*
 *
 *  *  Copyright  2015-2016. the original author or authors.
 *  *
 *  *  Licensed under the Apache License, Version 2.0 (the "License");
 *  *  you may not use this file except in compliance with the License.
 *  *  You may obtain a copy of the License at
 *  *
 *  *      http://www.apache.org/licenses/LICENSE-2.0
 *  *
 *  *  Unless required by applicable law or agreed to in writing, software
 *  *  distributed under the License is distributed on an "AS IS" BASIS,
 *  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  *  See the License for the specific language governing permissions and
 *  *  limitations under the License.
 *
 */

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package li.allan.domain;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import javax.annotation.Generated;
import java.util.*;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-06-12")
public class ThriftSubBean implements org.apache.thrift.TBase<ThriftSubBean, ThriftSubBean._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSubBean> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSubBean");

  private static final org.apache.thrift.protocol.TField BOOL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("boolType", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField SIGNED_BYTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedByteType", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField SIGNED_SHORT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedShortType", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SIGNED_INT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedIntType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SIGNED_LONG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedLongType", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SIGNED_DOUBLE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("signedDoubleType", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRING_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stringType", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSubBeanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSubBeanTupleSchemeFactory());
  }

  public boolean boolType; // required
  public byte signedByteType; // required
  public short signedShortType; // required
  public int signedIntType; // required
  public long signedLongType; // required
  public double signedDoubleType; // required
  public String stringType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_TYPE((short)1, "boolType"),
    SIGNED_BYTE_TYPE((short)2, "signedByteType"),
    SIGNED_SHORT_TYPE((short)3, "signedShortType"),
    SIGNED_INT_TYPE((short)4, "signedIntType"),
    SIGNED_LONG_TYPE((short)5, "signedLongType"),
    SIGNED_DOUBLE_TYPE((short)6, "signedDoubleType"),
    STRING_TYPE((short)7, "stringType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_TYPE
          return BOOL_TYPE;
        case 2: // SIGNED_BYTE_TYPE
          return SIGNED_BYTE_TYPE;
        case 3: // SIGNED_SHORT_TYPE
          return SIGNED_SHORT_TYPE;
        case 4: // SIGNED_INT_TYPE
          return SIGNED_INT_TYPE;
        case 5: // SIGNED_LONG_TYPE
          return SIGNED_LONG_TYPE;
        case 6: // SIGNED_DOUBLE_TYPE
          return SIGNED_DOUBLE_TYPE;
        case 7: // STRING_TYPE
          return STRING_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOLTYPE_ISSET_ID = 0;
  private static final int __SIGNEDBYTETYPE_ISSET_ID = 1;
  private static final int __SIGNEDSHORTTYPE_ISSET_ID = 2;
  private static final int __SIGNEDINTTYPE_ISSET_ID = 3;
  private static final int __SIGNEDLONGTYPE_ISSET_ID = 4;
  private static final int __SIGNEDDOUBLETYPE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("boolType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIGNED_BYTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedByteType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.SIGNED_SHORT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedShortType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SIGNED_INT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedIntType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SIGNED_LONG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedLongType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIGNED_DOUBLE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("signedDoubleType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stringType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSubBean.class, metaDataMap);
  }

  public ThriftSubBean() {
  }

  public ThriftSubBean(
    boolean boolType,
    byte signedByteType,
    short signedShortType,
    int signedIntType,
    long signedLongType,
    double signedDoubleType,
    String stringType)
  {
    this();
    this.boolType = boolType;
    setBoolTypeIsSet(true);
    this.signedByteType = signedByteType;
    setSignedByteTypeIsSet(true);
    this.signedShortType = signedShortType;
    setSignedShortTypeIsSet(true);
    this.signedIntType = signedIntType;
    setSignedIntTypeIsSet(true);
    this.signedLongType = signedLongType;
    setSignedLongTypeIsSet(true);
    this.signedDoubleType = signedDoubleType;
    setSignedDoubleTypeIsSet(true);
    this.stringType = stringType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSubBean(ThriftSubBean other) {
    __isset_bitfield = other.__isset_bitfield;
    this.boolType = other.boolType;
    this.signedByteType = other.signedByteType;
    this.signedShortType = other.signedShortType;
    this.signedIntType = other.signedIntType;
    this.signedLongType = other.signedLongType;
    this.signedDoubleType = other.signedDoubleType;
    if (other.isSetStringType()) {
      this.stringType = other.stringType;
    }
  }

  public ThriftSubBean deepCopy() {
    return new ThriftSubBean(this);
  }

  @Override
  public void clear() {
    setBoolTypeIsSet(false);
    this.boolType = false;
    setSignedByteTypeIsSet(false);
    this.signedByteType = 0;
    setSignedShortTypeIsSet(false);
    this.signedShortType = 0;
    setSignedIntTypeIsSet(false);
    this.signedIntType = 0;
    setSignedLongTypeIsSet(false);
    this.signedLongType = 0;
    setSignedDoubleTypeIsSet(false);
    this.signedDoubleType = 0.0;
    this.stringType = null;
  }

  public boolean isBoolType() {
    return this.boolType;
  }

  public ThriftSubBean setBoolType(boolean boolType) {
    this.boolType = boolType;
    setBoolTypeIsSet(true);
    return this;
  }

  public void unsetBoolType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOLTYPE_ISSET_ID);
  }

  /** Returns true if field boolType is set (has been assigned a value) and false otherwise */
  public boolean isSetBoolType() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOLTYPE_ISSET_ID);
  }

  public void setBoolTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOLTYPE_ISSET_ID, value);
  }

  public byte getSignedByteType() {
    return this.signedByteType;
  }

  public ThriftSubBean setSignedByteType(byte signedByteType) {
    this.signedByteType = signedByteType;
    setSignedByteTypeIsSet(true);
    return this;
  }

  public void unsetSignedByteType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDBYTETYPE_ISSET_ID);
  }

  /** Returns true if field signedByteType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedByteType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDBYTETYPE_ISSET_ID);
  }

  public void setSignedByteTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDBYTETYPE_ISSET_ID, value);
  }

  public short getSignedShortType() {
    return this.signedShortType;
  }

  public ThriftSubBean setSignedShortType(short signedShortType) {
    this.signedShortType = signedShortType;
    setSignedShortTypeIsSet(true);
    return this;
  }

  public void unsetSignedShortType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDSHORTTYPE_ISSET_ID);
  }

  /** Returns true if field signedShortType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedShortType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDSHORTTYPE_ISSET_ID);
  }

  public void setSignedShortTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDSHORTTYPE_ISSET_ID, value);
  }

  public int getSignedIntType() {
    return this.signedIntType;
  }

  public ThriftSubBean setSignedIntType(int signedIntType) {
    this.signedIntType = signedIntType;
    setSignedIntTypeIsSet(true);
    return this;
  }

  public void unsetSignedIntType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDINTTYPE_ISSET_ID);
  }

  /** Returns true if field signedIntType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedIntType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDINTTYPE_ISSET_ID);
  }

  public void setSignedIntTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDINTTYPE_ISSET_ID, value);
  }

  public long getSignedLongType() {
    return this.signedLongType;
  }

  public ThriftSubBean setSignedLongType(long signedLongType) {
    this.signedLongType = signedLongType;
    setSignedLongTypeIsSet(true);
    return this;
  }

  public void unsetSignedLongType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDLONGTYPE_ISSET_ID);
  }

  /** Returns true if field signedLongType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedLongType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDLONGTYPE_ISSET_ID);
  }

  public void setSignedLongTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDLONGTYPE_ISSET_ID, value);
  }

  public double getSignedDoubleType() {
    return this.signedDoubleType;
  }

  public ThriftSubBean setSignedDoubleType(double signedDoubleType) {
    this.signedDoubleType = signedDoubleType;
    setSignedDoubleTypeIsSet(true);
    return this;
  }

  public void unsetSignedDoubleType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SIGNEDDOUBLETYPE_ISSET_ID);
  }

  /** Returns true if field signedDoubleType is set (has been assigned a value) and false otherwise */
  public boolean isSetSignedDoubleType() {
    return EncodingUtils.testBit(__isset_bitfield, __SIGNEDDOUBLETYPE_ISSET_ID);
  }

  public void setSignedDoubleTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SIGNEDDOUBLETYPE_ISSET_ID, value);
  }

  public String getStringType() {
    return this.stringType;
  }

  public ThriftSubBean setStringType(String stringType) {
    this.stringType = stringType;
    return this;
  }

  public void unsetStringType() {
    this.stringType = null;
  }

  /** Returns true if field stringType is set (has been assigned a value) and false otherwise */
  public boolean isSetStringType() {
    return this.stringType != null;
  }

  public void setStringTypeIsSet(boolean value) {
    if (!value) {
      this.stringType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_TYPE:
      if (value == null) {
        unsetBoolType();
      } else {
        setBoolType((Boolean)value);
      }
      break;

    case SIGNED_BYTE_TYPE:
      if (value == null) {
        unsetSignedByteType();
      } else {
        setSignedByteType((Byte)value);
      }
      break;

    case SIGNED_SHORT_TYPE:
      if (value == null) {
        unsetSignedShortType();
      } else {
        setSignedShortType((Short)value);
      }
      break;

    case SIGNED_INT_TYPE:
      if (value == null) {
        unsetSignedIntType();
      } else {
        setSignedIntType((Integer)value);
      }
      break;

    case SIGNED_LONG_TYPE:
      if (value == null) {
        unsetSignedLongType();
      } else {
        setSignedLongType((Long)value);
      }
      break;

    case SIGNED_DOUBLE_TYPE:
      if (value == null) {
        unsetSignedDoubleType();
      } else {
        setSignedDoubleType((Double)value);
      }
      break;

    case STRING_TYPE:
      if (value == null) {
        unsetStringType();
      } else {
        setStringType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_TYPE:
      return isBoolType();

    case SIGNED_BYTE_TYPE:
      return getSignedByteType();

    case SIGNED_SHORT_TYPE:
      return getSignedShortType();

    case SIGNED_INT_TYPE:
      return getSignedIntType();

    case SIGNED_LONG_TYPE:
      return getSignedLongType();

    case SIGNED_DOUBLE_TYPE:
      return getSignedDoubleType();

    case STRING_TYPE:
      return getStringType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_TYPE:
      return isSetBoolType();
    case SIGNED_BYTE_TYPE:
      return isSetSignedByteType();
    case SIGNED_SHORT_TYPE:
      return isSetSignedShortType();
    case SIGNED_INT_TYPE:
      return isSetSignedIntType();
    case SIGNED_LONG_TYPE:
      return isSetSignedLongType();
    case SIGNED_DOUBLE_TYPE:
      return isSetSignedDoubleType();
    case STRING_TYPE:
      return isSetStringType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSubBean)
      return this.equals((ThriftSubBean)that);
    return false;
  }

  public boolean equals(ThriftSubBean that) {
    if (that == null)
      return false;

    boolean this_present_boolType = true;
    boolean that_present_boolType = true;
    if (this_present_boolType || that_present_boolType) {
      if (!(this_present_boolType && that_present_boolType))
        return false;
      if (this.boolType != that.boolType)
        return false;
    }

    boolean this_present_signedByteType = true;
    boolean that_present_signedByteType = true;
    if (this_present_signedByteType || that_present_signedByteType) {
      if (!(this_present_signedByteType && that_present_signedByteType))
        return false;
      if (this.signedByteType != that.signedByteType)
        return false;
    }

    boolean this_present_signedShortType = true;
    boolean that_present_signedShortType = true;
    if (this_present_signedShortType || that_present_signedShortType) {
      if (!(this_present_signedShortType && that_present_signedShortType))
        return false;
      if (this.signedShortType != that.signedShortType)
        return false;
    }

    boolean this_present_signedIntType = true;
    boolean that_present_signedIntType = true;
    if (this_present_signedIntType || that_present_signedIntType) {
      if (!(this_present_signedIntType && that_present_signedIntType))
        return false;
      if (this.signedIntType != that.signedIntType)
        return false;
    }

    boolean this_present_signedLongType = true;
    boolean that_present_signedLongType = true;
    if (this_present_signedLongType || that_present_signedLongType) {
      if (!(this_present_signedLongType && that_present_signedLongType))
        return false;
      if (this.signedLongType != that.signedLongType)
        return false;
    }

    boolean this_present_signedDoubleType = true;
    boolean that_present_signedDoubleType = true;
    if (this_present_signedDoubleType || that_present_signedDoubleType) {
      if (!(this_present_signedDoubleType && that_present_signedDoubleType))
        return false;
      if (this.signedDoubleType != that.signedDoubleType)
        return false;
    }

    boolean this_present_stringType = true && this.isSetStringType();
    boolean that_present_stringType = true && that.isSetStringType();
    if (this_present_stringType || that_present_stringType) {
      if (!(this_present_stringType && that_present_stringType))
        return false;
      if (!this.stringType.equals(that.stringType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_boolType = true;
    list.add(present_boolType);
    if (present_boolType)
      list.add(boolType);

    boolean present_signedByteType = true;
    list.add(present_signedByteType);
    if (present_signedByteType)
      list.add(signedByteType);

    boolean present_signedShortType = true;
    list.add(present_signedShortType);
    if (present_signedShortType)
      list.add(signedShortType);

    boolean present_signedIntType = true;
    list.add(present_signedIntType);
    if (present_signedIntType)
      list.add(signedIntType);

    boolean present_signedLongType = true;
    list.add(present_signedLongType);
    if (present_signedLongType)
      list.add(signedLongType);

    boolean present_signedDoubleType = true;
    list.add(present_signedDoubleType);
    if (present_signedDoubleType)
      list.add(signedDoubleType);

    boolean present_stringType = true && (isSetStringType());
    list.add(present_stringType);
    if (present_stringType)
      list.add(stringType);

    return list.hashCode();
  }

  @Override
  public int compareTo(ThriftSubBean other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBoolType()).compareTo(other.isSetBoolType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoolType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boolType, other.boolType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedByteType()).compareTo(other.isSetSignedByteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedByteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedByteType, other.signedByteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedShortType()).compareTo(other.isSetSignedShortType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedShortType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedShortType, other.signedShortType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedIntType()).compareTo(other.isSetSignedIntType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedIntType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedIntType, other.signedIntType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedLongType()).compareTo(other.isSetSignedLongType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedLongType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedLongType, other.signedLongType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignedDoubleType()).compareTo(other.isSetSignedDoubleType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignedDoubleType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signedDoubleType, other.signedDoubleType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStringType()).compareTo(other.isSetStringType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStringType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stringType, other.stringType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSubBean(");
    boolean first = true;

    sb.append("boolType:");
    sb.append(this.boolType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedByteType:");
    sb.append(this.signedByteType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedShortType:");
    sb.append(this.signedShortType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedIntType:");
    sb.append(this.signedIntType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedLongType:");
    sb.append(this.signedLongType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signedDoubleType:");
    sb.append(this.signedDoubleType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringType:");
    if (this.stringType == null) {
      sb.append("null");
    } else {
      sb.append(this.stringType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'boolType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedByteType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedShortType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedIntType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedLongType' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'signedDoubleType' because it's a primitive and you chose the non-beans generator.
    if (stringType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stringType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSubBeanStandardSchemeFactory implements SchemeFactory {
    public ThriftSubBeanStandardScheme getScheme() {
      return new ThriftSubBeanStandardScheme();
    }
  }

  private static class ThriftSubBeanStandardScheme extends StandardScheme<ThriftSubBean> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSubBean struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.boolType = iprot.readBool();
              struct.setBoolTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SIGNED_BYTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.signedByteType = iprot.readByte();
              struct.setSignedByteTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIGNED_SHORT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.signedShortType = iprot.readI16();
              struct.setSignedShortTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIGNED_INT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.signedIntType = iprot.readI32();
              struct.setSignedIntTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SIGNED_LONG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.signedLongType = iprot.readI64();
              struct.setSignedLongTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SIGNED_DOUBLE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.signedDoubleType = iprot.readDouble();
              struct.setSignedDoubleTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stringType = iprot.readString();
              struct.setStringTypeIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBoolType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'boolType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedByteType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedByteType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedShortType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedShortType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedIntType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedIntType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedLongType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedLongType' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSignedDoubleType()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'signedDoubleType' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSubBean struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOL_TYPE_FIELD_DESC);
      oprot.writeBool(struct.boolType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_BYTE_TYPE_FIELD_DESC);
      oprot.writeByte(struct.signedByteType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_SHORT_TYPE_FIELD_DESC);
      oprot.writeI16(struct.signedShortType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_INT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.signedIntType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_LONG_TYPE_FIELD_DESC);
      oprot.writeI64(struct.signedLongType);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIGNED_DOUBLE_TYPE_FIELD_DESC);
      oprot.writeDouble(struct.signedDoubleType);
      oprot.writeFieldEnd();
      if (struct.stringType != null) {
        oprot.writeFieldBegin(STRING_TYPE_FIELD_DESC);
        oprot.writeString(struct.stringType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSubBeanTupleSchemeFactory implements SchemeFactory {
    public ThriftSubBeanTupleScheme getScheme() {
      return new ThriftSubBeanTupleScheme();
    }
  }

  private static class ThriftSubBeanTupleScheme extends TupleScheme<ThriftSubBean> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSubBean struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.boolType);
      oprot.writeByte(struct.signedByteType);
      oprot.writeI16(struct.signedShortType);
      oprot.writeI32(struct.signedIntType);
      oprot.writeI64(struct.signedLongType);
      oprot.writeDouble(struct.signedDoubleType);
      oprot.writeString(struct.stringType);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSubBean struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.boolType = iprot.readBool();
      struct.setBoolTypeIsSet(true);
      struct.signedByteType = iprot.readByte();
      struct.setSignedByteTypeIsSet(true);
      struct.signedShortType = iprot.readI16();
      struct.setSignedShortTypeIsSet(true);
      struct.signedIntType = iprot.readI32();
      struct.setSignedIntTypeIsSet(true);
      struct.signedLongType = iprot.readI64();
      struct.setSignedLongTypeIsSet(true);
      struct.signedDoubleType = iprot.readDouble();
      struct.setSignedDoubleTypeIsSet(true);
      struct.stringType = iprot.readString();
      struct.setStringTypeIsSet(true);
    }
  }

}

